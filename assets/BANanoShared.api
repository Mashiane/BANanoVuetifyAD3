{"filename":"BANanoShared","events":[],"subroutines":[{"signature":"Sub Process_Globals"},{"signature":"Sub CalculateDistance(lat1 As Double, lon1 As Double, lat2 As Double, lon2 As Double) As Int"},{"signature":"Sub EnsureVisible(elID As String)"},{"signature":"Sub CleanFieldName(fld As String) As String"},{"signature":"Sub JSONUpdate(jsonContent As String, newContent As Map) As String"},{"signature":"Sub CoolCapitalization(value As String) As String"},{"signature":"Sub FreezIT(objSource As Object) As Object"},{"signature":"Sub ListOfMapsIndexOf(lst As List, prop As String, value As String) As Int"},{"signature":"Sub ListOfMapsFind(lst As List, k As String, v As String) As Map"},{"signature":"Sub ListLowerCaseItems(lst As List)"},{"signature":"Sub Flatten(m As Map, target As String, source As String)"},{"signature":"Sub ListRemoveItem(lst As List, itm As String) As List"},{"signature":"Sub ListAddDistinctItem(lst As List, itm As String) As List"},{"signature":"Sub ListAddDistinctLowerCaseItem(lst As List, itm As String) As List"},{"signature":"Sub ValidNumber(v As Object) As Object"},{"signature":"Sub isNaN(obj As Object) As Boolean"},{"signature":"Sub CIntList(lst As List) As List"},{"signature":"Sub CDblList(lst As List) As List"},{"signature":"Sub CStrList(lst As List) As List"},{"signature":"Sub ValidString(v As Object) As Object"},{"signature":"Sub GetListFromMapKeys(m As Map, keys As List) As List"},{"signature":"Sub RGBToHex(r As Int, g As Int, b As String) As String"},{"signature":"Sub HexToRGB(hexValue As String) As String"},{"signature":"Sub Initialize"},{"signature":"Sub BuildColor(color As String, intensity As String) As String"},{"signature":"Sub GetHexColor(Color As String, Intensity As String) As String"},{"signature":"Sub GetColorHex(sColor As String) As String"},{"signature":"Sub CloneTranslations(source As Map)"},{"signature":"Sub DOMContentLoaded As String"},{"signature":"Sub ShowLoader"},{"signature":"Sub HideLoader"},{"signature":"Sub ToolConvertToList(listName As String, source As String) As String"},{"signature":"Sub ToolConvertToConstants(prefix As String, source As String) As String"},{"signature":"Sub NormalizeColor(s As String) As String"},{"signature":"Sub NormalizeIntensity(s As String) As String"},{"signature":"Sub NormalizeTextColor(s As String) As String"},{"signature":"Sub NormalizeTextIntensity(i As String) As String"},{"signature":"Sub ListValues2Integers(lst As List, keys2process As List)"},{"signature":"Sub ListAddIfNotBlank(lstName As List, item As String)"},{"signature":"Sub JoinKeys(m As Map, delim As String, props As List) As String"},{"signature":"Sub JoinMapValues(m As Map, delim As String, props As List) As String"},{"signature":"Sub GetListItem(lst As List, pos As Int) As String"},{"signature":"Sub parseNull(v As Object) As String"},{"signature":"Sub GetProp(props As Map, Key As String, Default As Object) As Object"},{"signature":"Sub parseBool(v As Object) As Boolean"},{"signature":"Sub FormatDisplayDate(item As String, sFormat As String) As String\t\t\t'ignoredeadcode"},{"signature":"Sub FormatDisplayNumber(item As String, sFormat As String) As String\t\t\t'ignoredeadcode"},{"signature":"Sub FormatFileSize(Bytes As Float) As String\t\t\t\t\t'ignoredeadcode"},{"signature":"Sub ListTrimItems(cols As List) As List"},{"signature":"Sub ListItemsToInt(cols As List) As List"},{"signature":"Sub ListItemsToFloat(cols As List) As List"},{"signature":"Sub IncrementMap(m As Map, k As String)"},{"signature":"Sub DecrementMap(m As Map, k As String)"},{"signature":"Sub EQOperators(sm As Map) As List  'ignore"},{"signature":"Sub YYYYMMDD(sdate As String) As String"},{"signature":"Sub YYYYMM(sdate As String) As String"},{"signature":"Sub NiceDate(sdate As String) As String\t\t\t\t'ignoredeadcode"},{"signature":"Sub NiceMonth(sdate As String) As String\t\t\t'ignoredeadcode"},{"signature":"Sub NiceYear(sdate As String) As String\t\t\t'ignoredeadcode"},{"signature":"Sub NiceTime(stime As String) As String\t\t\t\t'ignoredeadcode"},{"signature":"Sub NiceMoney(smoney As String) As String\t\t\t\t'ignoredeadcode"},{"signature":"Sub Thousands(smoney As String) As String\t\t\t\t'ignoredeadcode"},{"signature":"Sub SetInterval(Module As Object, methodname As String, ms As Int, args As List) As Object"},{"signature":"Sub ClearInterval(interval As Object)"},{"signature":"Sub AppendHolderTo(target As String)"},{"signature":"Sub NiceFileSize(fsx As String) As String\t\t\t\t'ignoredeadcode"},{"signature":"Sub BasicAuthorization(username As String, password As String) As Map"},{"signature":"Sub MapKeys2List(m As Map) As List"},{"signature":"Sub List2ObjectArray(lst As List) As Object()"},{"signature":"Sub MapValues2ObjectArray(m As Map) As Object()"},{"signature":"Sub MapKeys2ObjectArray(m As Map) As Object()"},{"signature":"Sub MVSingleQuoteItems(delim As String, mvstring As String) As String"},{"signature":"Sub SourceCodeBuilder"},{"signature":"Sub AddNewLine"},{"signature":"Sub AddCode(scomment As String)"},{"signature":"Sub YesNoToBoolean(xvalue As String) As Boolean"},{"signature":"Sub AddComment(sc As String)"},{"signature":"Sub GetSourceCode As String"},{"signature":"Sub CreateElement(parent As String, tag As String, id As String,text As String) As BANanoElement"},{"signature":"Sub DateTimeNowToISOString As String"},{"signature":"Sub jsDateOconv(dateObj As BANanoObject) As String"},{"signature":"Sub AddElement(parentID As String, tag As String, id As String, text As String) As BANanoElement"},{"signature":"Sub AddElement1(parentID As String, tag As String, id As String, text As String, props As Map, styles As Map, classes As String) As BANanoElement"},{"signature":"Sub CreateElement1(parentID As String, tag As String, id As String, text As String, props As Map, styles As Map, classes As String) As BANanoElement"},{"signature":"Sub SetAttributes(targetElement As String, props As Map)"},{"signature":"Sub SetStyles(targetElement As String, styles As Map)"},{"signature":"Sub GetEmailResponse(email As String) As String"},{"signature":"Sub BuildEmail(sfrom As String, sto As String, scc As String, ssubject As String, smsg As String) As Map"},{"signature":"Sub dataURLToBlob(dataURL As String) As Object"},{"signature":"Sub DataURIToFileWait(obj As String, name As String) As BANanoObject"},{"signature":"Sub UploadFileWait(fileO As Map) As FileObject"},{"signature":"Sub UploadFileOptionsWait(fileO As Map, targetPath As String, bRename As Boolean) As FileObject"},{"signature":"Sub UploadFileRenameToWait(fileO As Map, targetPath As String, newFileName As String) As FileObject"},{"signature":"Sub ShuffleList(pl As List) As List"},{"signature":"Sub ExplodeList(lst As List, runs As Int) As List"},{"signature":"Sub NewList As List"},{"signature":"Sub NewList1(items As List) As List"},{"signature":"Sub GetIDFromEvent(e As BANanoEvent) As String"},{"signature":"Sub GetKeyFromEvent(e As BANanoEvent) As String"},{"signature":"Sub GetTargetValueFromEvent(e As BANanoEvent) As String"},{"signature":"Sub GetTargetPropertyFromEvent(e As BANanoEvent, prop As String) As String"},{"signature":"Sub GetTargetFromEvent(e As BANanoEvent) As BANanoObject"},{"signature":"Sub GetEventTargetProperty(e As BANanoEvent, prop As String) As String"},{"signature":"Sub GetFileListFromTarget(e As BANanoEvent) As List"},{"signature":"Sub GetFileFromTarget(e As BANanoEvent) As Map"},{"signature":"Sub BeautifyName(idName As String) As String"},{"signature":"Sub ProperSubName(vx As String, removePref As Boolean) As String"},{"signature":"Sub CamelCaseOthers(vx As String) As String"},{"signature":"Sub Capitalize(t As String) As String"},{"signature":"Sub CapitalizeEach(t As String, delim As String) As String"},{"signature":"Sub StrParse(delim As String, inputString As String) As List"},{"signature":"Sub ParseToListAndTrim(original As String) As List"},{"signature":"Sub StrParseComma(delim As String, inputString As Object) As List"},{"signature":"Sub Join(delimiter As String, lst As List) As String"},{"signature":"Sub CorrectName(oldName As String) As String"},{"signature":"Sub MVQuoteItems(delim As String, mvstring As String) As String"},{"signature":"Sub GetReadyState As String"},{"signature":"Sub SetOnReadyChange(EventHandler As Object)"},{"signature":"Sub DateIsAfter(date1 As String, date2 As String) As Boolean"},{"signature":"Sub RemDelim(sValue As String, Delim As String) As String"},{"signature":"Sub StringBreakAtUpperCase(st As String) As String"},{"signature":"Sub BuildStyle(styles As Map) As String"},{"signature":"Sub BuildClasses(properties As Map) As String"},{"signature":"Sub BuildAttributes(properties As Map) As String"},{"signature":"Sub JoinMapKeys(m As Map, delim As String) As String"},{"signature":"Sub JoinMapKeysQuote(m As Map, delim As String, squote As String) As String"},{"signature":"Sub LoremIpsum(count As String) As String"},{"signature":"Sub Random_Color As String"},{"signature":"Sub Rand_LoremIpsum(count As Int) As String"},{"signature":"Sub ListOfMapsKeysToLowerCase(lst As List)"},{"signature":"Sub ListOfMapsUpdateRecord(lst As List, k As String, v As String, m As Map)"},{"signature":"Sub ListOfMapsDelete(lst As List, k As String, v As String)"},{"signature":"Sub ListOfMapsRecordPos(lst As List, k As String, v As String) As Int"},{"signature":"Sub MvDistinct(delim As String, strmv As String) As String"},{"signature":"Sub KeyValues2Map(delim As String, keys As String, values As String) As Map"},{"signature":"Sub NewMap As Map"},{"signature":"Sub getElementById(sid As String) As BANanoObject"},{"signature":"Sub DateDiff(currentDate As String, otherDate As String) As Int"},{"signature":"Sub MinuteDiff(currentDate As String, otherDate As String) As Int"},{"signature":"Sub ListRemoveDuplicates(lst As List) As List"},{"signature":"Sub GetFileDetails(fileObj As Map) As FileObject"},{"signature":"Sub BeautifySourceCode(slang As String, sc As String) As String"},{"signature":"Sub HTTPUpload(fileObj As Object, module As Object, methodname As String)"},{"signature":"Sub GetAlphabets(value As String) As String"},{"signature":"Sub JSONPretty(m As Object) As String"},{"signature":"Sub ExtractMap(source As Map, keys As List) As Map"},{"signature":"Sub InStr(Text As String, sFind As String) As Int"},{"signature":"Sub JoinNonBlanks(delimiter As String, lst As List) As String"},{"signature":"Sub MapExtractKeys(m As Map, mkeys As List) As Map"},{"signature":"Sub JoinMapKeys1(delim As String, m As Map, mkeys As List) As String"},{"signature":"Sub JoinMaps(lst As List) As Map"},{"signature":"Sub JoinLists(lst As List) As List"},{"signature":"Sub MapProperty2List(om As List, prop As String) As List"},{"signature":"Sub ProgressRAG(dVariance As Double) As String"},{"signature":"Sub ExpenditureRAG(dVariance As Double) As String"},{"signature":"Sub ExpectedRAG(dValue As Double) As String"},{"signature":"Sub RSAIDNumber2DateOfBirth(rsaID As String) As String"},{"signature":"Sub YearNow() As String"},{"signature":"Sub MonthNow() As String"},{"signature":"Sub DateAdd(mDate As String, HowManyDays As Int) As String"},{"signature":"Sub MonthAdd(mDate As String, HowManyMonths As Int) As String"},{"signature":"Sub YearsAdd(mDate As String, HowManyYears As Int) As String"},{"signature":"Sub NumberOfDaysBetweenDates(CurrentDate As String, OtherDate As String) As Int"},{"signature":"Sub PeriodBetweenInDays(CurrentDate As String, OtherDate As String) As Int"},{"signature":"Sub CDbl(o As String) As Double"},{"signature":"Sub ProjectDays(sDays As String) As String"},{"signature":"Sub ProjectDate(sDate As String) As String"},{"signature":"Sub InStrRev(value As String, search As String) As Long"},{"signature":"Sub GetFullDate(v As String) As String"},{"signature":"Sub GetFullTime(v As String) As String"},{"signature":"Sub Len(Text As String) As Int"},{"signature":"Sub PadRight(Value As String, MaxLen As Int, PadChar As String) As String"},{"signature":"Sub PadLeft(Value As String, MaxLen As Int, PadChar As String) As String"},{"signature":"Sub GetListOfMapsProperty(lst As List, prop As String) As List"},{"signature":"Sub SumListOfMapsProperty(lst As List, prop As String) As Double"},{"signature":"Sub ListSumProperty(lst As List, prop As String) As Double"},{"signature":"Sub ListAverageProperty(lst As List, prop As String) As Double"},{"signature":"Sub ListMaxProperty(lst As List, prop As String) As Double"},{"signature":"Sub ListMinProperty(lst As List, prop As String) As Double"},{"signature":"Sub ListMedianProperty(lst As List, prop As String) As Double"},{"signature":"Sub Val(value As String) As String"},{"signature":"Sub IsComputed(value As String) As Boolean"},{"signature":"Sub GetNumbers(value As String) As String"},{"signature":"Sub Alpha(value As String) As String"},{"signature":"Sub List2KeyValues(lst As List, mapvalues As List) As List"},{"signature":"Sub List2IDValue(lst As List, mapValues As List) As List"},{"signature":"Sub ListToDataSource(keyName As String, valueName As String, lst As List) As List"},{"signature":"Sub List2ArrayVariable(lst As List) As String"},{"signature":"Sub JSONValues2LowerCase(sJSON As String, props As List) As String"},{"signature":"Sub Map2Json(mp As Map) As String"},{"signature":"Sub Map2JsonPretty(mp As Map) As String"},{"signature":"Sub Json2Map(strJSON As String) As Map"},{"signature":"Sub jsNewDate(value As String) As BANanoObject"},{"signature":"Sub NewDate(year As Int, month As Int, day As Int) As BANanoObject"},{"signature":"Sub NewDateTime(year As Int, month As Int, day As Int, hour As Int, minute As Int) As BANanoObject"},{"signature":"Sub Pad(Value As String, MaxLen As Int, PadChar As String, bright As Boolean) As String"},{"signature":"Sub CLng(o As Object) As Long"},{"signature":"Sub CInt(o As Object) As Int"},{"signature":"Sub List2Json(mp As List) As String"},{"signature":"Sub Json2List(strValue As String) As List"},{"signature":"Sub MapValues2LowerCase(m As Map, props As List)"},{"signature":"Sub NumberSuffix(N As Double) As String"},{"signature":"Sub List2Array (a_lstArgs As List) As String()"},{"signature":"Sub RandomString(iLength As Int, bLowerCase As Boolean, bUpperCase As Boolean, bNumbers As Boolean, AdditionalChars As String) As String"},{"signature":"Sub GeneratePassword(IntNum As Int) As String"},{"signature":"Sub RemDelimSB(delimiter As String, value As StringBuilder) As StringBuilder"},{"signature":"Sub Space(HM As Int) As String"},{"signature":"Sub MakeMoney(sValue As String) As String"},{"signature":"Sub Percentage(sValue As String) As String"},{"signature":"Sub LongDate(sDate As String) As String"},{"signature":"Sub LongDateTime(sDate As String) As String"},{"signature":"Sub TrimS(strValue As String) As String"},{"signature":"Sub LCaseS(Text As String) As String"},{"signature":"Sub InQuotes(sValue As String) As String"},{"signature":"Sub ProperCase(myStr As String) As String"},{"signature":"Sub WordsToProperCase (Words As String) As String"},{"signature":"Sub MapKeysLowerCaseSingle(m As Map) As Map"},{"signature":"Sub MapKeysLowerCaseList(lst As List) As List"},{"signature":"Sub SortMap(m As Map) As Map"},{"signature":"Sub Merge(oldm As Map, newm As Map) As Map"},{"signature":"Sub MergeList(oldL As List, otherL As List)"},{"signature":"Sub MergeMaps(oldm As Map, newm As Map) As Map"},{"signature":"Sub List2MapSimple(lst As List, bSort As Boolean) As Map"},{"signature":"Sub List2Options(lst As List, keyName As String, valueName As String) As Map"},{"signature":"Sub List2Map(lst As List, keyName As String, valueName As String) As Map"},{"signature":"Sub Map2Options(m As Map, keyName As String, valueName As String) As List"},{"signature":"Sub MapClone(oldMap As Map) As Map"},{"signature":"Sub MapCloneSwap(oldMap As Map) As Map"},{"signature":"Sub SetBackgroundImage(elid As String, url As String)"},{"signature":"Sub JSONSetProperty(sjson As String, updates As Map) As String"},{"signature":"Sub BR As String"},{"signature":"Sub HR As String"},{"signature":"Sub MakePx(sValue As String) As String"},{"signature":"Sub DownloadText2File(content As String, fileName As String)"},{"signature":"Sub SaveText2File(content As String, fileName As String)"},{"signature":"Sub SaveBinaryArray2File(iUint8Array As Object, dbName As String)"},{"signature":"Sub MvCount(strMV As String, Delimiter As String) As Int"},{"signature":"Sub AuditTrail(oldM As Map, newM As Map) As Map"},{"signature":"Sub TimeNow() As String"},{"signature":"Sub DateNow() As String"},{"signature":"Sub DateOnDaysFromToday(days2Add As Int) As String"},{"signature":"Sub DateTimeNow() As String"},{"signature":"Sub DateTimeNowBackUp() As String"},{"signature":"Sub Now() As String"},{"signature":"Sub LongDateTimeToday() As String"},{"signature":"Sub CopyMap(source As Map, keys As List) As Map"},{"signature":"Sub CamelCase(idName As String) As String"},{"signature":"Sub GetFileParentPath(Path As String) As String"},{"signature":"Sub GetFileName(Path As String) As String"},{"signature":"Sub GetFileExt(FullPath As String) As String"},{"signature":"Sub SetPrefix(prefix As String, target As Map) As Map"},{"signature":"Sub CStr(o As Object) As String"},{"signature":"Sub FixRecords(recs As List, trimThese As List, numThese As List, boolThese As List, dateThese As List, dblThese As List)"},{"signature":"Sub MakeInteger(m As Map, xkeys As List)"},{"signature":"Sub MakeDouble(m As Map, xkeys As List)"},{"signature":"Sub MakeYesNo(m As Map, xkeys As List)"},{"signature":"Sub MakeBoolean(m As Map, xkeys As List)"},{"signature":"Sub MakeTrim(m As Map, xkeys As List)"},{"signature":"Sub MakeLowerCase(m As Map) As Map"},{"signature":"Sub MakeDate(m As Map, xkeys As List)"},{"signature":"Sub CreateList(Delimiter As String, Values As String) As List"},{"signature":"Sub MvField(sValue As String, iPosition As Int, Delimiter As String) As String"},{"signature":"Sub RandListValue(ListX As List) As Object"},{"signature":"Sub RandListValue1(ListX As List) As Object"},{"signature":"Sub RamoveFromList(listX As List, item As String)"},{"signature":"Sub ToBoolean(sValue As String) As Boolean"},{"signature":"Sub IndexOfNth(occur As Int, query As String, data As String) As Int"},{"signature":"Sub MvLast(delim As String, value As String) As String"},{"signature":"Sub RemPrefix(xvalue As String, delim As String) As String"},{"signature":"Sub MaxOfList(lst As List) As Int"},{"signature":"Sub MaxOfMapKeys(lst As Map) As Int"},{"signature":"Sub MinOfList(lst As List) As Int"},{"signature":"Sub GetRecordFromJSONList(jsonValue As String, sPrimaryKey As String, sPrimaryValue As String) As Map"},{"signature":"Sub ExtraListFromJSONMaps(strJSON As String, Property As String) As List"},{"signature":"Sub ExtraPropertyFromListOfMaps(lst As List, Property As String) As List"},{"signature":"Sub AddMap2Json(strJSON As String, m As Map) As String"},{"signature":"Sub ListOfMapsExtractKey(lst As List, skey As String) As List"},{"signature":"Sub ListOfMapsGetProperty(lst As List, skey As String, bDuplicates As Boolean) As List"},{"signature":"Sub SumMapValues(m As Map) As Double"},{"signature":"Sub ListHas(data As String, listObj As List) As Boolean"},{"signature":"Sub ListDoesNotHave(data As String, listObj As List) As Boolean"},{"signature":"Sub OnList(searchList As List, searchValue As String) As Boolean"},{"signature":"Sub ExtraPropertyFromListOfMaps1(lst As List, Property As String) As Map"},{"signature":"Sub MvAdd(oldValue As String, delim As String, item As String) As String"},{"signature":"Sub MvRest(delim As String, svalue As String, startPos As String) As String"},{"signature":"Sub GenerateRandomPassword(numChars As Int, numbers As Boolean, lowercase As Boolean, uppercase As Boolean, symbols As Boolean) As String"},{"signature":"Sub AfterTodayRG(dVariance As Long) As String"},{"signature":"Sub PriorityRAG(dValue As Int) As String"},{"signature":"Sub RAG(dValue As Int) As String"},{"signature":"Sub GAR(dValue As Int) As String"},{"signature":"Sub StatusRAG(dValue As Int) As String"},{"signature":"Sub FaceRAG(dValue As Int) As String"},{"signature":"Sub FaceRG(dValue As Int) As String"},{"signature":"Sub FaceRG1(dValue As Int) As String"},{"signature":"Sub FaceDone(dValue As Int) As String"},{"signature":"Sub ProgressStatus(dValue As Int) As Int"},{"signature":"Sub StatusRG(dValue As Int) As String"},{"signature":"Sub EscapeField(f As String) As String"},{"signature":"Sub JoinFields(delimiter As String, lst As List) As String"},{"signature":"Sub JoinFields1(delimiter As String, sQuote As String, lst As List) As String"},{"signature":"Sub GetOptionsFromKV(delim As String, k As String, v As String) As Map"},{"signature":"Sub Unflatten(tdata As List, childname As String) As List"},{"signature":"Sub readAsText(fr As Map) As BANanoPromise"},{"signature":"Sub readAsBinaryString(fr As Map) As BANanoPromise"},{"signature":"Sub readAsDataURL(fr As Map) As BANanoPromise"},{"signature":"Sub readAsArrayBuffer(fr As Map) As BANanoPromise"},{"signature":"Sub readAsDataURLFromBlob(blb As Map) As BANanoPromise"},{"signature":"Sub GetBase64ImageFromURLWait(url As String) As String"},{"signature":"Sub JoinItems(delimiter As String, sQuote As String, lst As List) As String"},{"signature":"Sub FormatText(sText As String) As String"},{"signature":"Sub HideElement(elID As String)"},{"signature":"Sub ShowElement(elID As String)"},{"signature":"Sub Age(sdob As String) As Long"},{"signature":"Sub GetAlphaNumeric(value As String) As String"},{"signature":"Sub ListOfMap2Strings(lst As List) As List"},{"signature":"Sub Map2Strings(m As Map) As Map"},{"signature":"Sub DataType2FieldType(fldtype As String) As String"},{"signature":"Sub MapRemovePrefix(m As Map) As Map"},{"signature":"Sub MapRemoveKeys(m As Map, remkeys As List)"},{"signature":"Sub SetCoverImage(imgURL As String)"},{"signature":"Sub GetUploadResult(fileName As String, rslt As Object) As String"},{"signature":"Sub GetFileAsText(e As BANanoEvent) As BANanoPromise"},{"signature":"Sub GetUploadFileName(e As BANanoEvent) As String"},{"signature":"Sub GetSelectedFileObject(e As BANanoEvent) As FileObject"},{"signature":"Sub GenerateNanoID() As String"},{"signature":"Sub NumberToWords(N As Long) As String"},{"signature":"Sub CustomTag(parentID As String, elTag As String, elID As String) As BANanoElement"},{"signature":"Sub Anchor(parentID As String, elid As String, text As String, href As String, target As String) As BANanoElement"},{"signature":"Sub MailTo(parentID As String, elid As String, text As String, emailaddress As String) As BANanoElement"},{"signature":"Sub Download(parentID As String, elid As String, text As String, href As String) As BANanoElement"},{"signature":"Sub OL(parentID As String, elID As String) As BANanoElement"},{"signature":"Sub LI(parentID As String, elID As String, text As String) As BANanoElement"},{"signature":"Sub UL(parentID As String, elID As String, text As String) As BANanoElement"},{"signature":"Sub H1(parentID As String, elID As String, text As String) As BANanoElement"},{"signature":"Sub H2(parentID As String, elID As String, text As String) As BANanoElement"},{"signature":"Sub H3(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub H4(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub H5(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub H6(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub P(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub SPAN(parentID As String, elID As String, text As String) As BANanoElement"},{"signature":"Sub DIV(parentID As String, elID As String,text As String) As BANanoElement"},{"signature":"Sub BANanoMoveHTML(source As String, target As String)"},{"signature":"Sub BuildPHPEmail(sfrom As String, sto As String, scc As String, ssubject As String, smsg As String) As Map"},{"signature":"Sub AppendElement(parent As String, tag As String, id As String, text As String) As BANanoElement"},{"signature":"Sub AppendElement1(parentID As String, tag As String, id As String, text As String, props As Map, styles As Map, classes As String) As BANanoElement"},{"signature":"Sub ListRemoveItemsWithProp(olst As List, prop As String, value As String) As List"},{"signature":"Sub ListGetSequences(lst As List) As List"},{"signature":"Sub Map2Map(readFrom As Map, putIn As Map, keys As List, bLower As Boolean)"},{"signature":"Sub BreakAtUpperCase(st As String) As String"},{"signature":"Sub DeCamelCase(st As String) As String"},{"signature":"Sub DateNOD(CurrentDate As String, OtherDate As String) As Int"},{"signature":"Sub MapLowerKeys(m As Map) As Map"},{"signature":"Sub At(Text As String, sInStr As String) As Int"},{"signature":"Sub LTrim(Text As String) As String"},{"signature":"Sub RTrim(Text As String) As String"},{"signature":"Sub RndChrGen(Howmany As Int, CT As Int) As String"},{"signature":"Sub Mid2(Text As String, istart As Int, xLength As Int) As String"},{"signature":"Sub MidS(Text As String, iStart As Int) As String"},{"signature":"Sub MvRemoveDuplicates(sValue As String, Delim As String) As String"},{"signature":"Sub MvRemoveBlanks(sValue As String, Delim As String) As String"},{"signature":"Sub YesNo2ZeroOne(value As String) As String"},{"signature":"Sub ZeroOne2YN(value As String) As String"},{"signature":"Sub LeftS(Text As String, xLength As Long)As String"},{"signature":"Sub SortStringArray(sa() As String) As String()"},{"signature":"Sub GetExtension(fil As String) As String"},{"signature":"Sub EndsWithS(svalue As String, sfind As String) As Boolean"},{"signature":"Sub StartsWithS(svalue As String, sfind As String) As Boolean"},{"signature":"Sub ReplaceS(Text As String, sFind As String, sReplaceWith As String) As String"},{"signature":"Sub MvFromArray(varArry() As String, delim As String) As String"},{"signature":"Sub SortedKeys(m As Map) As List"},{"signature":"Sub InQuotes1(sValue As String) As String"},{"signature":"Sub CleanValue(sValue As String) As String"},{"signature":"Sub CountOccurences(strMaster As String, strWord As String) As Int"},{"signature":"Sub MvSearch(delimiter As String, Mv As String, searchfor As String) As Boolean"},{"signature":"Sub MvPos(delimiter As String, mv As String, searchfor As String) As Int"},{"signature":"Sub MvQuoteEach(strMV As String, delim As String) As String"},{"signature":"Sub ListSingleQuote(lst As List)"},{"signature":"Sub MvFromKeys(lst As Map, Delim As String) As String"},{"signature":"Sub MvFromValues(lst As Map, Delim As String) As String"},{"signature":"Sub JoinArray(Delimiter As String, varArray() As String) As String"},{"signature":"Sub ListSearch(lst As List, searchFor As String) As Boolean"},{"signature":"Sub MvFromListSingleQuote(lst As List, Delim As String) As String"},{"signature":"Sub RightS(Text As String, xLength As Long) As String"},{"signature":"Sub DateIconv(sDate As String) As Long"},{"signature":"Sub DateOconv(lDate As Long, withTime As Boolean) As String"},{"signature":"Sub MapProperty2ListQuote(om As List,prop As String,def As String) As List"},{"signature":"Sub IsImportValid(m As Map, fields As List) As Boolean"},{"signature":"Sub DeDuplicateMap(oldMap As Map) As Map"},{"signature":"Sub MapValues2List(m As Map) As List"},{"signature":"Sub MapValues2MV(m As Map, delim As String, keys As List) As String"},{"signature":"Sub Args2ObjectArray(m As List) As Object()"},{"signature":"Sub PushIfExist(nl As List, item As String) As List"},{"signature":"Sub ListOfMapsSortBy(lst As List, sortby As List) As List"},{"signature":"Sub MapCopy(sourceM As Map, sourceKeys As List) As Map"},{"signature":"Sub MapSetDefaults(orig As Map, defvalues As Map)"},{"signature":"Sub CleanID(v As String) As String"},{"signature":"Sub ListToMap(lst As List) As Map"},{"signature":"Sub CleanNulls(m As Map) As Map"},{"signature":"Sub RunRecursive(data As Map, path As String) As Object"},{"signature":"Sub GetRecursive(data As Map, path As String) As Object"},{"signature":"Sub GetRecursiveCamelCase(data As Map, path As String) As Object"},{"signature":"Sub PutRecursiveCamelCase(data As Map, path As String, value As Object)"},{"signature":"Sub PutRecursive(data As Map, path As String, value As Object)"},{"signature":"Sub ListOfMapsToSingleMap(source As List, prop As String) As Map"},{"signature":"Sub ListOfMapsToOptions(source As List, key As String, value As String) As List"},{"signature":"Sub ListOfMapsToOptionsNumeric(source As List, key As String, value As String) As List"},{"signature":"Sub readAsJsonWait(fr As Map) As Object"},{"signature":"Sub readAsTextWait(fr As Map) As String"},{"signature":"Sub readAsBinaryStringWait(fr As Map) As String"},{"signature":"Sub readAsDataURLWait(fr As Map) As String"},{"signature":"Sub readAsArrayBufferWait(fr As Map) As String"},{"signature":"Sub ProgressDone(currentCount As Long, totalCount As Long) As Int"},{"signature":"Sub MvFieldsUntil(delim As String, strValue As String, endPos As Int) As String"},{"signature":"Sub MvFromList(lst As List, Delim As String) As String"},{"signature":"Sub ExtrasExtractProperty(sExtras As String, propName As String) As List"},{"signature":"Sub ExtrasExtractProperty1(sExtras As String, propName As String, propName1 As String, propName1Of As String) As List"},{"signature":"Sub MvFromDelimitedString(Delim As String, Value As String, ValueDelim As String) As String"},{"signature":"Sub ToHTML(svalue As String, sFont As String) As String"},{"signature":"Sub GetAlpha(value As String) As String"},{"signature":"public Sub NumberFormat2Fix(number As Double, minimumIntegers As Int, maximumFractions As Int, minimumFractions As Int, groupingUsed As Boolean) As Double"},{"signature":"Sub FetchFileWait(path As String, name As String) As FileObject"},{"signature":"Sub PickRandomValue(lst As List) As Object"},{"signature":"Sub TrimMapItems(m As Map) As Map"},{"signature":"Sub TrimListItems(m As List) As List"},{"signature":"Sub JSONCleanType(cType As String) As String"},{"signature":"Sub JSONCleanArgument(etype As String) As String"},{"signature":"Sub JSONCleanDescription(sdesc As String) As String"},{"signature":"Sub MVSort(delim As String, oldChoices As String) As String"},{"signature":"Sub DeCamelCaseSpace(st As String) As String"},{"signature":"Sub Map2QueryString(m As Map) As String"},{"signature":"Sub ListIndexOf(lst As List, prop As String, value As String) As Int"},{"signature":"Sub ListChange(lst As List, prop As String, value As String, item As Map) As List"},{"signature":"Sub ListCreateUpdate(lst As List, prop As String, value As String, item As Map) As List"},{"signature":"Sub ListContains(lst As List, prop As String, value As String) As Boolean"},{"signature":"Sub ListFind(lst As List, prop As String, value As String) As Map"},{"signature":"Sub ListFindKeys(lst As List, prop As String, lstKeys As List) As List"},{"signature":"Sub ListAdd(lst As List, obj As Object)"},{"signature":"Sub ListClear(lst As List)"},{"signature":"Sub ListUpdate(lst As List, prop As String, value As String, item As Map) As List"},{"signature":"Sub ListDelete(lst As List, prop As String, value As String) As List"},{"signature":"Sub ListDeleteAll(lst As List, prop As String, value As String) As List"},{"signature":"Sub ExpectedPercentage(pmap As Map) As Map"},{"signature":"Sub MapKeyIncrement(m As Map, key As String, inc As Int)"},{"signature":"Sub MapKeyDecrement(m As Map, key As String, inc As Int)"},{"signature":"Sub MapKeyAddListItem(m As Map, key As String, v As Object)"},{"signature":"Sub MapKeyRemoveListItem(m As Map, key As String, v As Object)"},{"signature":"Sub ListSumOfColumn(recs As List, prop As String) As Double"},{"signature":"Sub ListAverageOfColumn(recs As List,prop As String) As Double"},{"signature":"Sub ListMinOfColumn(recs As List, prop As String) As Double"},{"signature":"Sub ListMaxOfColumn(recs As List, prop As String) As Double"},{"signature":"Sub ListMedianOfColumn(recs As List, prop As String) As Double"},{"signature":"Sub GetElementByData(dataattr As String, value As String) As BANanoElement"},{"signature":"Sub TrimIt(v As String) As String"},{"signature":"Sub AppendPlaceHolderTo(target As String)"},{"signature":"Sub BANanoGetHTMLAsIs(id As String) As String"},{"signature":"Sub BANanoGetHTML(id As String) As String"},{"signature":"Sub GetHTML(id As String) As String"},{"signature":"Sub URLSearchParamsFromURL As BANanoObject"},{"signature":"Sub URLSearchParamsFromMap(params As Map) As BANanoObject"},{"signature":"Sub URLQueryStringFromMap(params As Map) As String"},{"signature":"Sub ListFindWhere(res As List, props As Map) As Int"},{"signature":"Sub Left1(Text As String, xLength As Long) As String"},{"signature":"Sub Len1(Text As String) As Long"},{"signature":"Sub Trim1(strValue As String) As String"},{"signature":"Sub LCase1(Text As String) As String"},{"signature":"Sub InStr1(Text As String, sFind As String) As Int"},{"signature":"Sub Mid1(Text As String, Start As Int) As String"},{"signature":"Sub Right1(Text As String, xLength As Long) As String"},{"signature":"Sub InStr2(iStart As Int, Text As String, sFind As String) As Int"},{"signature":"Sub Replace1(Text As String, sFind As String, sReplaceWith As String) As String"},{"signature":"Sub UCase1(Text As String) As String"},{"signature":"Sub GetSubName(strDeclaration As String) As String"},{"signature":"Sub Encrypt4Php(data As String, key As String) As String"},{"signature":"Sub Decrypt4Php(decr As String, key As String) As String"},{"signature":"Sub MVFromMapKeys(delim As String, opt As Map) As String"},{"signature":"Sub MVFromMapValues(delim As String, opt As Map) As String"},{"signature":"Sub PrettierCode(code As String) As String"},{"signature":"Sub BeautifyPHP(code As String) As String"},{"signature":"Sub BeautifyGraphSQL(code As String) As String"},{"signature":"Sub BeautifyB4X(code As String) As String"},{"signature":"Sub Space1(HM As Int) As String"},{"signature":"Public Sub URLencode(InText As String) As String"},{"signature":"Sub Pad3(ItemToPad As String, ResultSize As Long, LeadPadding As String) As String"},{"signature":"Sub Right2(Text As String, iLength As Long) As String"},{"signature":"Sub GenString(NumChar As Long, Character As String) As String"},{"signature":"Sub Mid3(Text As String, Start As Int, iLength As Int) As String"},{"signature":"Public Sub CalcDistance(CurrentLat As Double,CurrentLong As Double,HouseLat As Double,HouseLong As Double) As Double"},{"signature":"Sub OpenURLTab(url As String)"},{"signature":"Sub OpenURLWhatsApp(tel As String)"},{"signature":"Sub OpenURLTel(tel As String)"},{"signature":"Sub Text2Speech(langx As String, text As String)"},{"signature":"Sub ScrollToTop"},{"signature":"Sub AddCssFile(url As String)"},{"signature":"Sub GetCurrentGeoPositionWait As BANanoGeoPosition"},{"signature":"Sub PlayAudio(url As String, volume As Double)"}],"properties":[]}