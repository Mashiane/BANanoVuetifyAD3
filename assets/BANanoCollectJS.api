{"filename":"BANanoCollectJS","events":[],"subroutines":[{"signature":"Sub Class_Globals"},{"signature":"Sub Initialize(Module As Object, lst As List) As BANanoCollectJS"},{"signature":"Sub InitializeJSON(Module As Object, jsonString As String) As BANanoCollectJS"},{"signature":"Sub sortBy(fld As String) As BANanoCollectJS"},{"signature":"Sub sortByMultiple(flds As List) As BANanoCollectJS"},{"signature":"Sub skip(num As Int) As BANanoCollectJS"},{"signature":"Sub skipUntil(num As Int) As BANanoCollectJS"},{"signature":"Sub skipWhile(num As Int) As BANanoCollectJS"},{"signature":"Sub slice(num As Int) As BANanoCollectJS"},{"signature":"Sub slice1(num As Int, endAt As Int) As BANanoCollectJS"},{"signature":"Sub splice(startAt As Int) As BANanoCollectJS"},{"signature":"Sub take(num As Int) As BANanoCollectJS"},{"signature":"Sub takeUntil(num As Int) As BANanoCollectJS"},{"signature":"Sub split(num As Int) As BANanoCollectJS"},{"signature":"Sub splice1(startAt As Int, numOfItems As Int) As BANanoCollectJS"},{"signature":"Sub splice2(startAt As Int, numOfItems As Int, newItem As Object) As BANanoCollectJS"},{"signature":"Sub sortByDesc(fld As String) As BANanoCollectJS"},{"signature":"Sub unique As List"},{"signature":"Sub unique1(prop As String) As List"},{"signature":"Sub last As Object"},{"signature":"Sub last1(methodName As String) As Object"},{"signature":"Sub sum(fld As String) As Int"},{"signature":"Sub toArray As List"},{"signature":"Sub toJson As String"},{"signature":"Sub sortKeys As BANanoCollectJS"},{"signature":"Sub sortDesc As BANanoCollectJS"},{"signature":"Sub sortKeysDesc As BANanoCollectJS"},{"signature":"Sub all As List"},{"signature":"Sub where1(fld As String, operator As String, value As String) As List"},{"signature":"Sub selectWhere(flds As List, wv As Map, ops As List, orderBy As List) As List"},{"signature":"Sub SELECT_WHERE As List"},{"signature":"Sub where(fld As String, value As String) As List"},{"signature":"Sub forPage(page As Int, offSet As Int) As List"},{"signature":"Sub whereBetween(fld As String, range As List) As List"},{"signature":"Sub whereIn(fld As String, range As List) As List"},{"signature":"Sub whereNotBetween(fld As String, range As List) As List"},{"signature":"Sub whereNotIn(fld As String, range As List) As List"},{"signature":"Sub whereNotNull(fld As String) As List"},{"signature":"Sub whereNull(fld As String) As List"},{"signature":"Sub firstWhere(fld As String, value As String) As Map"},{"signature":"Sub exists(fld As String, value As String) As Boolean"},{"signature":"Sub items As List"},{"signature":"Sub avg(fld As String) As Double"},{"signature":"Sub collapse As BANanoCollectJS"},{"signature":"Sub combine(nl As List) As BANanoCollectJS"},{"signature":"Sub chunk(num As Int) As List"},{"signature":"Sub crossJoin(objects As List) As BANanoCollectJS"},{"signature":"Sub concat(objects As List) As BANanoCollectJS"},{"signature":"Sub contains1(fld As Object) As Boolean"},{"signature":"Sub flatten() As BANanoCollectJS"},{"signature":"Sub flip() As BANanoCollectJS"},{"signature":"Sub flatten1(depth As Int) As BANanoCollectJS"},{"signature":"Sub contains2(fld As String, value As Object) As Boolean"},{"signature":"Sub count As Int"},{"signature":"Sub size As Int"},{"signature":"Sub eachItem(methodName As String) As BANanoCollectJS"},{"signature":"Sub reduceItem( methodName As String) As BANanoCollectJS"},{"signature":"Sub transform( methodName As String, params As List) As BANanoCollectJS"},{"signature":"Sub takeWhile( methodName As String, params As List) As BANanoCollectJS"},{"signature":"Sub tap( methodName As String, params As List) As BANanoCollectJS"},{"signature":"Sub rejectItem( methodName As String, params As List) As BANanoCollectJS"},{"signature":"Sub reject(methodName As String) As BANanoCollectJS"},{"signature":"Sub mapItem(methodName As String) As BANanoCollectJS"},{"signature":"Sub filter(methodName As String) As List"},{"signature":"Sub eachSpread( methodName As String, params As List) As BANanoCollectJS"},{"signature":"Sub every(methodName As String) As BANanoCollectJS"},{"signature":"Sub pipe( methodName As String, params As List) As Object"},{"signature":"Sub first As Map"},{"signature":"Sub first1(methodName As String) As Object"},{"signature":"Sub forget(prop As String) As BANanoCollectJS"},{"signature":"Sub getValueAt(pos As Int) As Object"},{"signature":"Sub get(prop As Object) As Map"},{"signature":"Sub getDefault(prop As Object, def As Object) As Map"},{"signature":"Sub replaceItem(item As Map) As List"},{"signature":"Sub replaceRecursive(item As Map) As BANanoCollectJS"},{"signature":"Sub groupBy(fld As String) As List"},{"signature":"Sub has(fld As String) As Boolean"},{"signature":"Sub hasItems(flds As List) As Boolean"},{"signature":"Sub search(value As Object) As Object"},{"signature":"Sub searchStrict(value As Object) As Object"},{"signature":"Sub implode(fld As String, delim As String) As String"},{"signature":"Sub pad(num As Int, value As String) As String"},{"signature":"Sub keys As List"},{"signature":"Sub values As List"},{"signature":"Sub maxOfKey(fld As String) As Long"},{"signature":"Sub modeOfKey(fld As String) As List"},{"signature":"Sub medianOfKey(fld As String) As Double"},{"signature":"Sub merge(lst As List) As BANanoCollectJS"},{"signature":"Sub only(lst As List) As List"},{"signature":"Sub nth(inth As Int) As List"},{"signature":"Sub mergeRecursive(lst As List) As BANanoCollectJS"},{"signature":"Sub minOfKey(fld As String) As Int"},{"signature":"Sub isEmpty As Boolean"},{"signature":"Sub isNotEmpty As Boolean"},{"signature":"Sub selectFields(flds As List) As List"},{"signature":"Sub pluck(fld As String) As List"},{"signature":"Sub pop As BANanoCollectJS"},{"signature":"Sub random As Object"},{"signature":"Sub random1(num As Int) As List"},{"signature":"Sub sort As BANanoCollectJS"},{"signature":"Sub reverse As BANanoCollectJS"},{"signature":"Sub shift As BANanoCollectJS"},{"signature":"Sub shuffle As BANanoCollectJS"},{"signature":"Sub prepend(xitems As List) As BANanoCollectJS"},{"signature":"Sub readBy(key As Object, value As Object) As Map"},{"signature":"Sub updateBy(key As Object, value As Object, nRecord As Map) As Boolean"},{"signature":"Sub deleteBy(key As Object, value As Object) As Boolean"},{"signature":"Sub indexOf1(item As Map) As Int"},{"signature":"Sub add(xitem As Object) As BANanoCollectJS"},{"signature":"Sub set(pos As Int, xitem As Object) As BANanoCollectJS"},{"signature":"Sub removeAt(pos As Int) As BANanoCollectJS"},{"signature":"Sub push(xitem As Object) As BANanoCollectJS"},{"signature":"Sub put(k As Object, v As Object) As BANanoCollectJS"},{"signature":"Sub pull(prop As String) As BANanoCollectJS"},{"signature":"Sub diff(flds As List) As List"},{"signature":"Sub diffAssoc(flds As List) As List"},{"signature":"Sub diffKeys(flds As List) As List"},{"signature":"Sub duplicates() As List"},{"signature":"Sub except(flds As List) As BANanoCollectJS"},{"signature":"Sub intersect(flds As List) As BANanoCollectJS"},{"signature":"Sub join(flds As List) As BANanoCollectJS"},{"signature":"Sub keyBy(skeyBy As String) As BANanoCollectJS"},{"signature":"Sub intersectByKeys(flds As List) As BANanoCollectJS"},{"signature":"Sub union(flds As List) As BANanoCollectJS"},{"signature":"Sub unwrap(flds As List) As BANanoCollectJS"},{"signature":"Sub wrap(flds As List) As BANanoCollectJS"},{"signature":"Sub zip(flds As List) As BANanoCollectJS"},{"signature":"Sub Clear"},{"signature":"Sub CLEAR_WHERE"},{"signature":"Sub ADD_WHERE(fld As String, operator As String, value As Object) As BANanoCollectJS"},{"signature":"Sub ADD_ORDER_BY(fld As String) As BANanoCollectJS"},{"signature":"Sub ADD_FIELD(fld As String) As BANanoCollectJS"}],"properties":[]}