<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.mongo.MongoDatabaseWrapper</name>
        <shortname>MongoDatabase</shortname>
        <comment>Provides access to a database.</comment>
        <objectwrapper>com.mongodb.client.MongoDatabase</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetCollection</name>
            <comment>Returns a MongoCollection. Creates the collection if it does not already exist.</comment>
            <returntype>anywheresoftware.mongo.MongoCollectionWrapper</returntype>
            <parameter>
                <name>CollectionName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>RunCommand</name>
            <comment>Runs a database command.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>Command</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Drop</name>
            <comment>Deletes the database.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>CollectionNames</name>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <comment>Lists the collections names.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Gets the database name.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.mongo.MongoCollectionWrapper</name>
        <shortname>MongoCollection</shortname>
        <comment>Represents a single collection.</comment>
        <objectwrapper>com.mongodb.client.MongoCollection</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Delete</name>
            <comment>Deletes the documents matching the filter. Returns the number of documents deleted.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Filter</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Replace</name>
            <comment>Replaces the first matching document.
Filter - The filter map.
Document - New document.
Upsert - If true then the document will be inserted if there is no match.</comment>
            <returntype>anywheresoftware.mongo.MongoCollectionWrapper.UpdateResultWrapper</returntype>
            <parameter>
                <name>Filter</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Document</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Upsert</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Insert</name>
            <comment>Inserts one or more documents.
 Example: &lt;code&gt;Collection.Insert(Array(CreateMap("key1": 100, "key2": 200)))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Documents</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Update</name>
            <comment>Updates matching documents.
Filter - The filter map.
Update - Update operations.

Example: &lt;code&gt;
Collection.Update(CreateMap("_id": "some_id"), CreateMap("$set": CreateMap("score": 3)))&lt;/code&gt;</comment>
            <returntype>anywheresoftware.mongo.MongoCollectionWrapper.UpdateResultWrapper</returntype>
            <parameter>
                <name>Filter</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Update</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Drop</name>
            <comment>Deletes the collection.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Find2</name>
            <comment>Similar to Find
Skip - Number of documents to skip.
Limit - Maximum number of documents to return.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Filter</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Projection</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Sort</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Skip</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>CreateIndex</name>
            <comment>Creates an index. Returns the index name.
Example: &lt;code&gt;
Collection.CreateIndex(CreateMap("rank": 1))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Keys</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Find</name>
            <comment>Finds matching documents in the collection.
Filter - A Map with the filter.
Projection - List with the field names that should be returned. Pass Null to return all fields.
Sort - The sort map. Pass Null if not needed.

Example: &lt;code&gt;
Dim res As List = Collection.Find(CreateMap("status": "good"), Null, CreateMap("score": 1))&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Filter</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Projection</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Sort</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Aggregate</name>
            <comment>Executes an aggregation pipeline. Each element in the list is a Map that defines a single step.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Pipeline</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <property>
            <name>Count</name>
            <returntype>long</returntype>
            <comment>Gets the number of documents in the collection.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.mongo.MongoCollectionWrapper.UpdateResultWrapper</name>
        <shortname>UpdateResult</shortname>
        <objectwrapper>com.mongodb.client.result.UpdateResult</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ModifiedCount</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MatchedCount</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.mongo.MongoClientWrapper</name>
        <shortname>MongoClient</shortname>
        <comment>A MongoDB client. Implemented as a connection pool. A single instance can be used by multiple handlers.
&lt;link&gt;MongoDB manual|https://docs.mongodb.com/manual/&lt;/link&gt;</comment>
        <objectwrapper>com.mongodb.MongoClient</objectwrapper>
        <owner>process</owner>
        <method>
            <name>TicksToDate</name>
            <comment>Utility method that converts ticks to a native Date object.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the client and sets the connection Uri.
EventName - Currently not used.
ConnectionString - Connection Uri.
Example: &lt;code&gt;
mongo.Initialize("", "mongodb://127.0.0.1:27017")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ConnectionString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StringToObjectId</name>
            <comment>Utility method that converts a 24 byte hex string to an object id.
Can be used to find documents based on the id.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Id</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the client.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetDatabase</name>
            <comment>Returns a MongoDatabase. Creates the database if it does not already exist.</comment>
            <returntype>anywheresoftware.mongo.MongoDatabaseWrapper</returntype>
            <parameter>
                <name>DatabaseName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DateToTicks</name>
            <comment>Utility method that converts a native Date object to ticks.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Date</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>DatabaseNames</name>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <comment>Lists the database names.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.mongo.MapCodec</name>
        <owner>process</owner>
        <method>
            <name>encode</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>writer</name>
                <type>org.bson.BsonWriter</type>
            </parameter>
            <parameter>
                <name>document</name>
                <type>anywheresoftware.b4a.objects.collections.Map.MyMap</type>
            </parameter>
            <parameter>
                <name>encoderContext</name>
                <type>org.bson.codecs.EncoderContext</type>
            </parameter>
        </method>
        <method>
            <name>getDocumentId</name>
            <comment></comment>
            <returntype>org.bson.BsonValue</returntype>
            <parameter>
                <name>document</name>
                <type>anywheresoftware.b4a.objects.collections.Map.MyMap</type>
            </parameter>
        </method>
        <method>
            <name>generateIdIfAbsentFromDocument</name>
            <comment></comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map.MyMap</returntype>
            <parameter>
                <name>document</name>
                <type>anywheresoftware.b4a.objects.collections.Map.MyMap</type>
            </parameter>
        </method>
        <method>
            <name>decode</name>
            <comment></comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map.MyMap</returntype>
            <parameter>
                <name>reader</name>
                <type>org.bson.BsonReader</type>
            </parameter>
            <parameter>
                <name>decoderContext</name>
                <type>org.bson.codecs.DecoderContext</type>
            </parameter>
        </method>
        <method>
            <name>documentHasId</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>document</name>
                <type>anywheresoftware.b4a.objects.collections.Map.MyMap</type>
            </parameter>
        </method>
        <property>
            <name>EncoderClass</name>
            <returntype>java.lang.Class</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.mongo.MapCodec.MyMapBson</name>
        <owner>process</owner>
        <method>
            <name>getKey</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>entrySet</name>
            <comment></comment>
            <returntype>java.util.Set</returntype>
        </method>
        <method>
            <name>containsKey</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>values</name>
            <comment></comment>
            <returntype>java.util.Collection</returntype>
        </method>
        <method>
            <name>clear</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isEmpty</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>toBsonDocument</name>
            <comment></comment>
            <returntype>org.bson.BsonDocument</returntype>
            <parameter>
                <name>documentClass</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>codecRegistry</name>
                <type>org.bson.codecs.configuration.CodecRegistry</type>
            </parameter>
        </method>
        <method>
            <name>containsValue</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>put</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>remove</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>getValue</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>size</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>get</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>putAll</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>keySet</name>
            <comment></comment>
            <returntype>java.util.Set</returntype>
        </method>
    </class>
    <version>0.9</version>
    <dependsOn>mongodb-driver-3.3.0</dependsOn>
    <dependsOn>mongodb-driver-core-3.3.0</dependsOn>
    <dependsOn>bson-3.3.0</dependsOn>
</root>
