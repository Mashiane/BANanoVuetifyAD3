!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports):"function"==typeof define&&define.amd?define(["exports"],factory):factory(global.ArcgisToGeojsonUtils={})}(this,(function(exports){"use strict";function pointsEqual(a,b){for(var i=0;i<a.length;i++)if(a[i]!==b[i])return!1;return!0}function closeRing(coordinates){return pointsEqual(coordinates[0],coordinates[coordinates.length-1])||coordinates.push(coordinates[0]),coordinates}function ringIsClockwise(ringToTest){for(var total=0,i=0,rLength=ringToTest.length,pt1=ringToTest[i],pt2;i<rLength-1;i++)total+=((pt2=ringToTest[i+1])[0]-pt1[0])*(pt2[1]+pt1[1]),pt1=pt2;return total>=0}function vertexIntersectsVertex(a1,a2,b1,b2){var uaT=(b2[0]-b1[0])*(a1[1]-b1[1])-(b2[1]-b1[1])*(a1[0]-b1[0]),ubT=(a2[0]-a1[0])*(a1[1]-b1[1])-(a2[1]-a1[1])*(a1[0]-b1[0]),uB=(b2[1]-b1[1])*(a2[0]-a1[0])-(b2[0]-b1[0])*(a2[1]-a1[1]);if(0!==uB){var ua=uaT/uB,ub=ubT/uB;if(ua>=0&&ua<=1&&ub>=0&&ub<=1)return!0}return!1}function arrayIntersectsArray(a,b){for(var i=0;i<a.length-1;i++)for(var j=0;j<b.length-1;j++)if(vertexIntersectsVertex(a[i],a[i+1],b[j],b[j+1]))return!0;return!1}function coordinatesContainPoint(coordinates,point){for(var contains=!1,i=-1,l=coordinates.length,j=l-1;++i<l;j=i)(coordinates[i][1]<=point[1]&&point[1]<coordinates[j][1]||coordinates[j][1]<=point[1]&&point[1]<coordinates[i][1])&&point[0]<(coordinates[j][0]-coordinates[i][0])*(point[1]-coordinates[i][1])/(coordinates[j][1]-coordinates[i][1])+coordinates[i][0]&&(contains=!contains);return contains}function coordinatesContainCoordinates(outer,inner){var intersects=arrayIntersectsArray(outer,inner),contains=coordinatesContainPoint(outer,inner[0]);return!(intersects||!contains)}function convertRingsToGeoJSON(rings){for(var outerRings=[],holes=[],x,outerRing,hole,r=0;r<rings.length;r++){var ring=closeRing(rings[r].slice(0));if(!(ring.length<4))if(ringIsClockwise(ring)){var polygon=[ring.slice().reverse()];outerRings.push(polygon)}else holes.push(ring.slice().reverse())}for(var uncontainedHoles=[];holes.length;){hole=holes.pop();var contained=!1;for(x=outerRings.length-1;x>=0;x--)if(coordinatesContainCoordinates(outerRing=outerRings[x][0],hole)){outerRings[x].push(hole),contained=!0;break}contained||uncontainedHoles.push(hole)}for(;uncontainedHoles.length;){hole=uncontainedHoles.pop();var intersects=!1;for(x=outerRings.length-1;x>=0;x--)if(arrayIntersectsArray(outerRing=outerRings[x][0],hole)){outerRings[x].push(hole),intersects=!0;break}intersects||outerRings.push([hole.reverse()])}return 1===outerRings.length?{type:"Polygon",coordinates:outerRings[0]}:{type:"MultiPolygon",coordinates:outerRings}}function orientRings(poly){var output=[],polygon=poly.slice(0),outerRing=closeRing(polygon.shift().slice(0));if(outerRing.length>=4){ringIsClockwise(outerRing)||outerRing.reverse(),output.push(outerRing);for(var i=0;i<polygon.length;i++){var hole=closeRing(polygon[i].slice(0));hole.length>=4&&(ringIsClockwise(hole)&&hole.reverse(),output.push(hole))}}return output}function flattenMultiPolygonRings(rings){for(var output=[],i=0;i<rings.length;i++)for(var polygon=orientRings(rings[i]),x=polygon.length-1;x>=0;x--){var ring=polygon[x].slice(0);output.push(ring)}return output}function shallowClone(obj){var target={};for(var i in obj)obj.hasOwnProperty(i)&&(target[i]=obj[i]);return target}function getId(attributes,idAttribute){for(var keys=idAttribute?[idAttribute,"OBJECTID","FID"]:["OBJECTID","FID"],i=0;i<keys.length;i++){var key=keys[i];if(key in attributes&&("string"==typeof attributes[key]||"number"==typeof attributes[key]))return attributes[key]}throw Error("No valid id attribute found")}function arcgisToGeoJSON(arcgis,idAttribute){var geojson={};if(arcgis.features){geojson.type="FeatureCollection",geojson.features=[];for(var i=0;i<arcgis.features.length;i++)geojson.features.push(arcgisToGeoJSON(arcgis.features[i],idAttribute))}if("number"==typeof arcgis.x&&"number"==typeof arcgis.y&&(geojson.type="Point",geojson.coordinates=[arcgis.x,arcgis.y],"number"==typeof arcgis.z&&geojson.coordinates.push(arcgis.z)),arcgis.points&&(geojson.type="MultiPoint",geojson.coordinates=arcgis.points.slice(0)),arcgis.paths&&(1===arcgis.paths.length?(geojson.type="LineString",geojson.coordinates=arcgis.paths[0].slice(0)):(geojson.type="MultiLineString",geojson.coordinates=arcgis.paths.slice(0))),arcgis.rings&&(geojson=convertRingsToGeoJSON(arcgis.rings.slice(0))),"number"==typeof arcgis.xmin&&"number"==typeof arcgis.ymin&&"number"==typeof arcgis.xmax&&"number"==typeof arcgis.ymax&&(geojson.type="Polygon",geojson.coordinates=[[[arcgis.xmax,arcgis.ymax],[arcgis.xmin,arcgis.ymax],[arcgis.xmin,arcgis.ymin],[arcgis.xmax,arcgis.ymin],[arcgis.xmax,arcgis.ymax]]]),(arcgis.geometry||arcgis.attributes)&&(geojson.type="Feature",geojson.geometry=arcgis.geometry?arcgisToGeoJSON(arcgis.geometry):null,geojson.properties=arcgis.attributes?shallowClone(arcgis.attributes):null,arcgis.attributes))try{geojson.id=getId(arcgis.attributes,idAttribute)}catch(err){}return JSON.stringify(geojson.geometry)===JSON.stringify({})&&(geojson.geometry=null),arcgis.spatialReference&&arcgis.spatialReference.wkid&&4326!==arcgis.spatialReference.wkid&&console.warn("Object converted in non-standard crs - "+JSON.stringify(arcgis.spatialReference)),geojson}function geojsonToArcGIS(geojson,idAttribute){idAttribute=idAttribute||"OBJECTID";var spatialReference={wkid:4326},result={},i;switch(geojson.type){case"Point":result.x=geojson.coordinates[0],result.y=geojson.coordinates[1],result.spatialReference=spatialReference;break;case"MultiPoint":result.points=geojson.coordinates.slice(0),result.spatialReference=spatialReference;break;case"LineString":result.paths=[geojson.coordinates.slice(0)],result.spatialReference=spatialReference;break;case"MultiLineString":result.paths=geojson.coordinates.slice(0),result.spatialReference=spatialReference;break;case"Polygon":result.rings=orientRings(geojson.coordinates.slice(0)),result.spatialReference=spatialReference;break;case"MultiPolygon":result.rings=flattenMultiPolygonRings(geojson.coordinates.slice(0)),result.spatialReference=spatialReference;break;case"Feature":geojson.geometry&&(result.geometry=geojsonToArcGIS(geojson.geometry,idAttribute)),result.attributes=geojson.properties?shallowClone(geojson.properties):{},geojson.id&&(result.attributes[idAttribute]=geojson.id);break;case"FeatureCollection":for(result=[],i=0;i<geojson.features.length;i++)result.push(geojsonToArcGIS(geojson.features[i],idAttribute));break;case"GeometryCollection":for(result=[],i=0;i<geojson.geometries.length;i++)result.push(geojsonToArcGIS(geojson.geometries[i],idAttribute))}return result}var index={arcgisToGeoJSON:arcgisToGeoJSON,geojsonToArcGIS:geojsonToArcGIS};exports.arcgisToGeoJSON=arcgisToGeoJSON,exports.geojsonToArcGIS=geojsonToArcGIS,exports.default=index}));