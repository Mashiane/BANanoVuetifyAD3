class Encryption{get encryptMethodLength(){var encryptMethod,aesNumber=this.encryptMethod.match(/\d+/)[0];return parseInt(aesNumber)}get encryptKeySize(){var aesNumber=this.encryptMethodLength;return parseInt(aesNumber/8)}get encryptMethod(){return"AES-256-CBC"}decrypt(encryptedString,key){var json=JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(encryptedString))),salt=CryptoJS.enc.Hex.parse(json.salt),iv=CryptoJS.enc.Hex.parse(json.iv),encrypted=json.ciphertext,iterations=parseInt(json.iterations);iterations<=0&&(iterations=999);var encryptMethodLength=this.encryptMethodLength/4,hashKey=CryptoJS.PBKDF2(key,salt,{hasher:CryptoJS.algo.SHA512,keySize:encryptMethodLength/8,iterations:iterations}),decrypted;return CryptoJS.AES.decrypt(encrypted,hashKey,{mode:CryptoJS.mode.CBC,iv:iv}).toString(CryptoJS.enc.Utf8)}encrypt(string,key){var iv=CryptoJS.lib.WordArray.random(16),salt=CryptoJS.lib.WordArray.random(256),iterations=999,encryptMethodLength=this.encryptMethodLength/4,hashKey=CryptoJS.PBKDF2(key,salt,{hasher:CryptoJS.algo.SHA512,keySize:encryptMethodLength/8,iterations:999}),encrypted=CryptoJS.AES.encrypt(string,hashKey,{mode:CryptoJS.mode.CBC,iv:iv}),encryptedString,output={ciphertext:CryptoJS.enc.Base64.stringify(encrypted.ciphertext),iv:CryptoJS.enc.Hex.stringify(iv),salt:CryptoJS.enc.Hex.stringify(salt),iterations:999};return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(JSON.stringify(output)))}}